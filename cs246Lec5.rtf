{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;}
\margl1440\margr1440\vieww12340\viewh14040\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 -note: implicit conversion from cin to bool\
	-i.e. cin knows status of last op\
	\
	int main()\{\
		int i;\
		while(true)\{\
			cin >> i;\
			if(!cin)break;    	//replaces cin.fail()\
			out << i <<endl; 	//cin = True success\
		\}					//cin = false fail\
	\}\
\
-aside:\
	10 operators << >> have a different meaning in c\
		-in c, there are bit shift operators\
			a >> b right shift\
			-LHS >>/<< RHS variable means bit shift\
			-cin << / cout >> variable (iostreams)\
				-cin >> x >> y >> z\
					value from cin assigned to x\'a1\'adreturn cin\
						value from cin assigned to y\'a1\'adreturn cin\
\
e.g. simplify\
	int main()\{\
		int i;\
		while(true)\{\
			if(!(cin>>i))break;\
			cout << i << endl;\
		\}\
	\}\
\
e.g. last time\
	int main()\{\
		int i;\
		while(cin >> i)\{\
			cout << i << endl;\
		\}\
	\}\
\
e.g. read all ints with EOF -skip invalid input\
	int main()\{\
		int i;\
		while(true)\{\
			if(!(cin >> i))\{\
				if(cin.eof())break;		//i.e. done\
				cin.clear(); 			//clear fail flag/bit\
				cin.ignore();			//discard data(invalid)\
			\}\
			else\
			\{\
				cout << i << endl;\
			\}\
		\}\
	\}\
\
e.g. reading strings\
	-string is a type, std::string\
	-need to include string #include <string>\
\
	int main()\{\
		string s;\
		cin >> s;  	\
	//stream into a string(ignores leading white space, \
							read characters until next whitespace\
							read a word)\
		cout << s;\
	\}\
\
if you want to read whitespace: \
	-getline(cin, s);	//s is a string (reads to next newline)\
\
I/O manipulators\
	cout << 95 << endl;			//print 95\
	cout << \cf2 hex\cf0  << 95 << endl;	//print 5f\
	-I/O manipulators change the behaviour of the stream\
		-stay in effect until \'a1\'b0overwritten\'a1\'b1 by another manipulator\
\
		-std::hex -> convert all subsequent output to hex\
\
		-std::dec -> convert all subsequent output to dec\
\
		-std::endl\
\
-stream abstraction applies to \'a1\'b0all\'a1\'b1 data\
	-e.g. files - read from a file - ifstream - read from file\
								ofstream -output to file\
	-e.g. in c:\
		#include <stdio.h>\
		int main()\{\
			char s[256];\
			FILE *file = fopen(\'a1\'b0suite.txt\'a1\'b1, \'a1\'b0r\'a1\'b1);\
			while(true)\
			\{\
				if(feof(file))break;\
				printf(\'a1\'b0%\\n\'a1\'b1, s);\
			\}\
			fclose(file);\
		\}\
\
-e.g. in c++:\
		#include <fstream>\
		#include <iostream>\
		int main()\
		\{\
			ifstream file\{\'a1\'b0suite.txt\'a1\'b1\};		//initialize and opens file(for reading)\
			string s;\
			while(file >> s)\{\
				cout << s << endl;\
			\}\
		\}								// implicit close here -ifstream goes out of scope\
\
-e.g. strings - use streams to read from/write to strings\
	-#include<sstream>  -std::istringstream	-read from string\
						-std::ostringstream	-write to string\
	int li = 5;\
	int hi = 65;\
	ostringstream ss;\
	ss << \'a1\'b0Enter a number between\'a1\'b1 << li << \'a1\'b0and\'a1\'b1 << hi;\
	string s = ss.str();\
	cout << s << endl;\
\
-e.g. convert a string to a number\
	int n;\
	while(true)\{\
		cout << \'a1\'b0Enter a number\'a1\'b1 << endl;\
		string s;\
		cin>>s;\
		istringstream ss(s);		//cin >> n\
		if(ss>>n)break;			//success!\
		cout << \'a1\'b0I Said,\'a1\'b1;\
	\}\
	cout << n << endl;\
\}\
\
e.g. reunited\
		int main()\{\
			string s;\
			while(cin >> s)\{\
				istringstream ss(s);\
				int n;\
				if(ss >> n) cout << n << endl;\
			\}\
		\}\
\
-strings\
	-in c\
		-an array of characters(char *, char[]), terminated with null(\\0)\
		-explicitly manage memory, if a string grows, need to allocate more memory\
		-risky -easy to overwrite \\0, easy to corrupt memory\
	-in c++\
		-string are a type\
		-grow as needed -no manager\
		-safer -no memory corruption\
		-much easier to use\
\
std::string\
#include<string>\
equality s1 == s2 // compare the contents\
inequality s1 != s2\
comparison s2 < s3\
		     s3 <= s4 //lexographic\
length	s1.length();\
concatenation s1 = s2+s3\
			  s4 += s5\
c-style character access\
	-string s\{\'a1\'b0abc\'a1\'b1\};\
		s[0] ->a\
		s[1] ->b\
		s[2] ->c\
	note: not null-terminated\
	more-course notes\
\
Default function parameters\
	-make function parameter optional, or supply a default\
\
	void printSuiteFile(string file = \'a1\'b0suite.txt\'a1\'b1)\
	\{\
		ifstream file \{name\};\
		string s;\
		while(file>>s)\
		\{\
			cout<<s<<endl;\
		\}\
	\}\
\
	-printSuiteFile();\
	-printSuiteFile(\'a1\'b0suite2.txt\'a1\'b1)\
\
	-can have multiple default parameters\
	-can mix default/non default in your parameters\
\
	-e.g.\
		void func(int a, int b, int c  = 5)\
			-func(a,b,c);\
			-func(a,b);\
\
		void func2(int a = 5, int b = 6, int c);\
			-func2(7,3,4);	//ok\
			-func2(5);		//c = 5 ? ok\'a1\'ad..\
			-func2(1,3);		//i give up \
								-ambiguous(avoid)\
								-default parameters go at the end of the parameter list\
\
\
		\
\
}