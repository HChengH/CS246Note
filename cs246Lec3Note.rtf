{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11340\viewh14060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Shell scripts\
	-file containing a sequence of shell commands\
		-execute as if it was a program\
		- #!/bin/bash (tell the OS this is a shell script) \'a1\'b0she-bang\'a1\'b1\
			date\
			whoami\
			pwd \
		-it\'a1\'afs a text file with any file name\
		-./first-script (tell the system in the current directory and look for the file named first-script)\
		-1. she-bang\
		-2.make excitable\
			-chmod u+x\'a1\'ad\
\
Path variable\
	-list of directories \
	-where bash looks for commands\
	-never includes the current directory\
	-./ to run from current directory\
	\
Variables\
	-supported by bash\
	-x = 1 -> set a variable (no spaces!)\
	-echo $x -> get value of variable\
	-echo $\{x\} -> alt syntax(better), avoids ambiguity \
	-variables are all strings\
		-dir = ~ -> dir = /u4/j2avery (home directory)\
		-dir = x ->  * glowing Patter for \'a1\'b0all files\'a1\'b1\
		-echo $(dir)\
		-cd $(dir)\
\
double quotes \'a1\'b0 \'a1\'b1 -bash will expand a variable in double quotes\
	-e.g. \'a1\'b0Path is $\{PATH\}\'a1\'b1\
\
single quotes \'a1\'ae \'a1\'af -bash will not expand , will always get literal value\
\
./myscript arg1, arg2\
	-$1 -first argument from command line\
	-$2 -second argument from command line\
	-$0 -name of the script being run\
	-$# -number of command line arguments\
\
-e.g. check if a word is in the dictionary\
	-./isItAWord word\
\
	#!/bin/bash\
	# use egrep to solve (this is a comment)\
	egrep \'a1\'b0^$1$\'a1\'b1 /usr/share/dict/word\
\
-e.g. password check \
	#!/bin/bash\
	egrep \'a1\'b0^$1$\'a1\'b1 /usr/share/dict/words > /dev/null  (/dev/null empty destination)\
	if[ $? -eq 0 ]; then\
		echo\'a1\'b1bad password\'a1\'b1\
	else\
		echo \'a1\'b0Good password\'a1\'b1\
	fi\
\
	-egrep return 0 means match\
	-$? = last return code\
\
Syntax\
	if [cond]; then\
		\'a1\'ad\
	else [cond] then\
		\'a1\'ad\
	else \'a1\'ad\
		\'a1\'ad\
\
-e.g. verify arguments\
	#!/bin/bash\
	usage()\{\
		echo\'a1\'b1Usage: $0 password\'a1\'b1\
	\}\
	if [ $# -ne 1 ]; then\
		usage\
		exit\
	fi\
	egrep \'a1\'b0^$1$\'a1\'b1 /usr/share/dict/word > /dev/null\
\
variables are strings\
	-operators /expression will tell bash to treat as a string or integer\
	-(integer)\
		-eq equals\
		-ne not equals\
		-lt less than\
		-gt greater than\
	-(string)\
		- = equals\
		- == equals\
		- != not equals\
		- > greater than\
		- < less than\
\
Loops\
	-e.g. bring numbers from 1 to $1 (i.e. command-line arg)\
\
	#!/bin/bash\
	x = 1\
	while [ $x -le $1 ]; do\
		echo $x\
		x = $((x+1))\
	done\
\
	- (()) syntax for arithmetic operations\
\
	-e.g. iterate through a list\
		-rename a bunch of files from .cpp -> .cc\
\
		#!/bin/bash\
		for name in *.cpp ; do\
			mv $\{name\} $\{name%cpp\}cc\
		done\
\
list-string sep by whitespace\
	-e.g. how many times does $1(word) occur in $2(file)\
\
	#!/bin/bash\
	x=0\
	for word in $(cat $2); do\
		if [ word = $1 ]; then\
			x = $((x+1))\
		fi\
	done\
	echo $x\
\
\
\
\
\
 }